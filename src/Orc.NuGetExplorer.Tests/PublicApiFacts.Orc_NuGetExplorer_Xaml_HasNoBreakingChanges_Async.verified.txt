[assembly: System.Resources.NeutralResourcesLanguage("en-US")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("Orc.NuGetExplorer.Tests")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v8.0", FrameworkDisplayName=".NET 8.0")]
[assembly: System.Windows.Markup.XmlnsDefinition("http://schemas.wildgums.com/orc/nugetexplorer", "Orc.NuGetExplorer")]
[assembly: System.Windows.Markup.XmlnsDefinition("http://schemas.wildgums.com/orc/nugetexplorer", "Orc.NuGetExplorer.Controls")]
[assembly: System.Windows.Markup.XmlnsDefinition("http://schemas.wildgums.com/orc/nugetexplorer", "Orc.NuGetExplorer.Converters")]
[assembly: System.Windows.Markup.XmlnsDefinition("http://schemas.wildgums.com/orc/nugetexplorer", "Orc.NuGetExplorer.Views")]
[assembly: System.Windows.Markup.XmlnsPrefix("http://schemas.wildgums.com/orc/nugetexplorer", "orcnugetexplorer")]
[assembly: System.Windows.ThemeInfo(System.Windows.ResourceDictionaryLocation.SourceAssembly, System.Windows.ResourceDictionaryLocation.SourceAssembly)]
public static class LoadAssembliesOnStartup { }
public static class ModuleInitializer
{
    public static void Initialize() { }
}
namespace Orc.NuGetExplorer.Controls
{
    [System.Windows.TemplatePart(Name="PART_Badge", Type=typeof(System.Windows.FrameworkElement?))]
    [System.Windows.TemplatePart(Name="PART_BadgeContent", Type=typeof(System.Windows.FrameworkElement?))]
    public class Badged : System.Windows.Controls.ContentControl
    {
        public static readonly System.Windows.DependencyProperty BadgeForegroundProperty;
        public static readonly System.Windows.DependencyProperty BadgeProperty;
        public static readonly System.Windows.DependencyProperty IsShowedProperty;
        public Badged() { }
        public object? Badge { get; set; }
        public System.Windows.Media.Brush? BadgeForeground { get; set; }
        public bool IsShowed { get; set; }
        public event System.Windows.DependencyPropertyChangedEventHandler? IsShowedChanged;
        public override void OnApplyTemplate() { }
    }
    public class InfiniteScrollListBox : System.Windows.Controls.ListBox
    {
        public static readonly System.Windows.DependencyProperty CommandParameterProperty;
        public static readonly System.Windows.DependencyProperty CommandProperty;
        public static readonly System.Windows.DependencyProperty IsCommandExecutingProperty;
        public static readonly System.Windows.DependencyProperty ScrollSizeProperty;
        public InfiniteScrollListBox() { }
        public Catel.MVVM.TaskCommand? Command { get; set; }
        public object CommandParameter { get; set; }
        public bool IsCommandExecuting { get; set; }
        public int ScrollSize { get; set; }
        protected System.Threading.Tasks.Task ExecuteLoadingItemsCommandAsync() { }
    }
    public class RotationProgressBar : System.Windows.Controls.ProgressBar
    {
        public static readonly System.Windows.DependencyProperty IconDataProperty;
        public static readonly System.Windows.DependencyProperty IsInProgressProperty;
        public static readonly System.Windows.DependencyProperty ShowErrorProperty;
        public static readonly System.Windows.DependencyProperty ShowWarningProperty;
        public static readonly System.Windows.DependencyProperty SpeedProperty;
        public static readonly System.Windows.DependencyProperty SuccessProperty;
        public RotationProgressBar() { }
        public System.Windows.Shapes.Path? IconData { get; set; }
        public bool IsInProgress { get; protected set; }
        public bool ShowError { get; set; }
        public bool ShowWarning { get; set; }
        public double Speed { get; set; }
        public bool Success { get; set; }
    }
    public class TabControllerButton : System.Windows.Controls.RadioButton
    {
        public static readonly System.Windows.DependencyProperty IsFirstProperty;
        public static readonly System.Windows.DependencyProperty NextProperty;
        public static readonly System.Windows.DependencyProperty TabSourceProperty;
        public TabControllerButton() { }
        public bool IsFirst { get; set; }
        public Orc.NuGetExplorer.Controls.TabControllerButton? Next { get; set; }
        public System.Windows.Controls.TabControl? TabSource { get; set; }
    }
    public static class WpfHelper
    {
        public static TChild? FindVisualChild<TChild>(System.Windows.DependencyObject obj)
            where TChild : System.Windows.DependencyObject { }
    }
}
namespace Orc.NuGetExplorer.Controls.Templating
{
    public class BadgeContentTemplateSelector : System.Windows.Controls.DataTemplateSelector
    {
        public BadgeContentTemplateSelector() { }
        public System.Windows.DataTemplate? Available { get; set; }
        public System.Windows.DataTemplate? Default { get; set; }
        public System.Windows.DataTemplate? NotAvailable { get; set; }
        public override System.Windows.DataTemplate? SelectTemplate(object item, System.Windows.DependencyObject container) { }
    }
}
namespace Orc.NuGetExplorer.Converters
{
    [System.Windows.Data.ValueConversion(typeof(bool), typeof(int))]
    public class BoolToIntConverter : Catel.MVVM.Converters.ValueConverterBase<bool, int>
    {
        public BoolToIntConverter() { }
        protected override object Convert(bool value, System.Type targetType, object? parameter) { }
    }
    [System.Windows.Data.ValueConversion(typeof(System.Collections.ICollection), typeof(System.Windows.Visibility))]
    public class EmptyCollectionToVisibleConverter : Catel.MVVM.Converters.CollectionToCollapsingVisibilityConverter
    {
        public EmptyCollectionToVisibleConverter() { }
        protected override object? Convert(object? value, System.Type targetType, object? parameter) { }
    }
    [System.Windows.Data.ValueConversion(typeof(System.Uri?), typeof(string?))]
    public class ExtendedUriToStringConverter : Catel.MVVM.Converters.ValueConverterBase<System.Uri, string>
    {
        public ExtendedUriToStringConverter() { }
        protected override object? Convert(System.Uri? value, System.Type targetType, object? parameter) { }
    }
    [System.Windows.Data.ValueConversion(typeof(Orc.NuGetExplorer.FeedVerificationResult), typeof(bool))]
    public class InvalidFeedToBoolConverter : Catel.MVVM.Converters.ValueConverterBase<Orc.NuGetExplorer.FeedVerificationResult, bool>
    {
        public InvalidFeedToBoolConverter() { }
        protected override object Convert(Orc.NuGetExplorer.FeedVerificationResult value, System.Type targetType, object? parameter) { }
    }
    [System.Windows.Data.ValueConversion(typeof(NuGet.Frameworks.NuGetFramework), typeof(string))]
    public class NuGetFrameworkToStringConverter : Catel.MVVM.Converters.ValueConverterBase<NuGet.Frameworks.NuGetFramework, string>
    {
        public NuGetFrameworkToStringConverter() { }
        protected override object Convert(NuGet.Frameworks.NuGetFramework? value, System.Type targetType, object? parameter) { }
    }
    [System.Windows.Data.ValueConversion(typeof(NuGet.Frameworks.NuGetFramework), typeof(System.Windows.Visibility))]
    public class NuGetFrameworkToVisibilityConverter : Catel.MVVM.Converters.ValueConverterBase<NuGet.Frameworks.NuGetFramework, System.Windows.Visibility>
    {
        public NuGetFrameworkToVisibilityConverter() { }
        protected override object Convert(NuGet.Frameworks.NuGetFramework? value, System.Type targetType, object? parameter) { }
    }
    [System.Windows.Data.ValueConversion(typeof(NuGet.Versioning.NuGetVersion), typeof(string))]
    public class NuGetVersionToStringConverter : Catel.MVVM.Converters.ValueConverterBase<NuGet.Versioning.NuGetVersion, string>
    {
        public NuGetVersionToStringConverter() { }
        protected override object Convert(NuGet.Versioning.NuGetVersion? value, System.Type targetType, object? parameter) { }
    }
    [System.Windows.Data.ValueConversion(typeof(bool?), typeof(bool))]
    public class NullableBooleanTrueConverter : Catel.MVVM.Converters.ValueConverterBase<bool?>
    {
        public NullableBooleanTrueConverter() { }
        protected override object Convert(bool? value, System.Type targetType, object? parameter) { }
        protected override object ConvertBack(object? value, System.Type targetType, object? parameter) { }
    }
    [System.Windows.Data.ValueConversion(typeof(Orc.NuGetExplorer.Enums.PackageStatus), typeof(bool))]
    public class PackageStatusEnumToBoolConverter : Catel.MVVM.Converters.ValueConverterBase<Orc.NuGetExplorer.Enums.PackageStatus, bool>
    {
        public PackageStatusEnumToBoolConverter() { }
        protected override object Convert(Orc.NuGetExplorer.Enums.PackageStatus value, System.Type targetType, object? parameter) { }
    }
    [System.Windows.Data.ValueConversion(typeof(Orc.NuGetExplorer.Enums.PackageStatus), typeof(System.Windows.Media.Brush))]
    public class PackageStatusEnumToBrushConverter : Catel.MVVM.Converters.ValueConverterBase<Orc.NuGetExplorer.Enums.PackageStatus, System.Windows.Media.Brush>
    {
        public PackageStatusEnumToBrushConverter() { }
        protected override object Convert(Orc.NuGetExplorer.Enums.PackageStatus value, System.Type targetType, object? parameter) { }
    }
    [System.Windows.Data.ValueConversion(typeof(System.Windows.Media.Color), typeof(System.Windows.Media.SolidColorBrush))]
    public class RemoveTransparencyColorBrushConverter : Catel.MVVM.Converters.ValueConverterBase<System.Windows.Media.Color, System.Windows.Media.SolidColorBrush>
    {
        public RemoveTransparencyColorBrushConverter() { }
        protected override object Convert(System.Windows.Media.Color value, System.Type targetType, object? parameter) { }
    }
    [System.Windows.Data.ValueConversion(typeof(System.Uri), typeof(System.Windows.Media.Imaging.BitmapImage))]
    public class UriToBitmapConverter : Catel.MVVM.Converters.ValueConverterBase<System.Uri, System.Windows.Media.Imaging.BitmapImage>
    {
        public UriToBitmapConverter() { }
        protected override object Convert(System.Uri? value, System.Type targetType, object? parameter) { }
    }
}
namespace Orc.NuGetExplorer
{
    public class ExplorerTab
    {
        public static readonly Orc.NuGetExplorer.ExplorerTab Browse;
        public static readonly Orc.NuGetExplorer.ExplorerTab Installed;
        public static readonly Orc.NuGetExplorer.ExplorerTab Update;
        public string Name { get; }
    }
    public interface IImageResolveService
    {
        System.Windows.Media.ImageSource ResolveImageFromUri(System.Uri uri);
        System.Threading.Tasks.Task<System.Windows.Media.ImageSource?> ResolveImageFromUriAsync(System.Uri uri);
    }
    public interface INuGetConfigurationResetService
    {
        System.Threading.Tasks.Task ResetAsync();
    }
    public interface INuGetExplorerInitialState
    {
        Orc.NuGetExplorer.PackageSearchParameters? InitialSearchParameters { get; }
        Orc.NuGetExplorer.ExplorerTab Tab { get; }
    }
    public interface IPackageCommandService
    {
        System.Threading.Tasks.Task<bool> CanExecuteAsync(Orc.NuGetExplorer.PackageOperationType operationType, Orc.NuGetExplorer.IPackageDetails package);
        System.Threading.Tasks.Task ExecuteAsync(Orc.NuGetExplorer.PackageOperationType operationType, Orc.NuGetExplorer.IPackageDetails packageDetails);
        System.Threading.Tasks.Task ExecuteInstallAsync(Orc.NuGetExplorer.IPackageDetails packageDetails, System.Threading.CancellationToken token);
        System.Threading.Tasks.Task ExecuteInstallAsync(Orc.NuGetExplorer.IPackageDetails packageDetails, System.IDisposable packageOperationContext, System.Threading.CancellationToken token);
        System.Threading.Tasks.Task ExecuteUninstallAsync(Orc.NuGetExplorer.IPackageDetails packageDetails, System.Threading.CancellationToken token);
        System.Threading.Tasks.Task ExecuteUpdateAsync(Orc.NuGetExplorer.IPackageDetails packageDetails, System.Threading.CancellationToken token);
        System.Threading.Tasks.Task ExecuteUpdateAsync(Orc.NuGetExplorer.IPackageDetails packageDetails, System.IDisposable packageOperationContext, System.Threading.CancellationToken token);
        string GetActionName(Orc.NuGetExplorer.PackageOperationType operationType);
    }
    public interface IPackageMetadataMediaDownloadService
    {
        System.Threading.Tasks.Task DownloadMediaForMetadataAsync(NuGet.Protocol.Core.Types.IPackageSearchMetadata packageMetadata);
    }
    public interface IPackagesUIService
    {
        string SettingsTitle { get; set; }
        System.Threading.Tasks.Task ShowPackagesExplorerAsync();
        System.Threading.Tasks.Task ShowPackagesExplorerAsync(Orc.NuGetExplorer.INuGetExplorerInitialState initialState);
        System.Threading.Tasks.Task<Catel.Services.UIVisualizerResult?> ShowPackagesSourceSettingsAsync();
    }
    public static class IValidationContextExtensions
    {
        public static string[]? GetAlertMessages(this Catel.Data.IValidationContext validationContext, string validationTag) { }
    }
    public static class InlineCollectionExtensions
    {
        public static void AddIfNotNull(this System.Windows.Documents.InlineCollection inlineCollection, System.Windows.Documents.Inline inline) { }
    }
    public static class InlineExtensions
    {
        public static System.Windows.Documents.Inline Append(this System.Windows.Documents.Inline inline, System.Windows.Documents.Inline inlineToAdd) { }
        public static System.Windows.Documents.Inline AppendRange(this System.Windows.Documents.Inline inline, System.Collections.Generic.IEnumerable<System.Windows.Documents.Inline> inlines) { }
        public static System.Windows.Documents.Bold Bold(this System.Windows.Documents.Inline inline) { }
        public static System.Windows.Documents.Inline Insert(this System.Windows.Documents.Inline inline, System.Windows.Documents.Inline inlineToAdd) { }
        public static System.Windows.Documents.Inline InsertRange(this System.Windows.Documents.Inline inline, System.Collections.Generic.IEnumerable<System.Windows.Documents.Inline> inlines) { }
    }
    public class NuGetExplorerInitialState : Orc.NuGetExplorer.INuGetExplorerInitialState
    {
        public NuGetExplorerInitialState(Orc.NuGetExplorer.ExplorerTab tab, Orc.NuGetExplorer.PackageSearchParameters? packageSearchParameters = null) { }
        public Orc.NuGetExplorer.PackageSearchParameters? InitialSearchParameters { get; }
        public Orc.NuGetExplorer.ExplorerTab Tab { get; }
    }
    public static class ObservableCollectionExtensions
    {
        public static void MoveDown<T>(this System.Collections.ObjectModel.ObservableCollection<T> collection, T item)
            where T :  notnull { }
        public static void MoveUp<T>(this System.Collections.ObjectModel.ObservableCollection<T> collection, T item)
            where T :  notnull { }
    }
    public class PackageMetadataMediaDownloadService : Orc.NuGetExplorer.IImageResolveService, Orc.NuGetExplorer.IPackageMetadataMediaDownloadService
    {
        public const string DefaultIconUri = "pack://application:,,,/Orc.NuGetExplorer.Xaml;component/Resources/Images/default-" +
            "package-icon.png";
        public PackageMetadataMediaDownloadService(Orc.NuGetExplorer.Providers.IApplicationCacheProvider appCacheProvider) { }
        public System.Threading.Tasks.Task DownloadMediaForMetadataAsync(NuGet.Protocol.Core.Types.IPackageSearchMetadata packageMetadata) { }
        public System.Windows.Media.ImageSource ResolveImageFromUri(System.Uri uri) { }
        public System.Threading.Tasks.Task<System.Windows.Media.ImageSource?> ResolveImageFromUriAsync(System.Uri uri) { }
    }
    public class PackagesBatch
    {
        public PackagesBatch() { }
        public Orc.NuGetExplorer.PackageOperationType OperationType { get; set; }
        public System.Collections.ObjectModel.ObservableCollection<Orc.NuGetExplorer.IPackageDetails> PackageList { get; set; }
    }
    public static class StringExtensions
    {
        public static System.Windows.Documents.Inline ToInline(this string text) { }
        public static System.Windows.Documents.Inline ToInline(this string text, System.Windows.Media.Brush brush) { }
    }
    public class SynchronizationContextScopeManager
    {
        public SynchronizationContextScopeManager() { }
        public static System.IDisposable OutOfContext() { }
    }
    public class SynchronizeInvoker : System.ComponentModel.ISynchronizeInvoke
    {
        public SynchronizeInvoker(System.Windows.Threading.Dispatcher dispatcher) { }
        public bool InvokeRequired { get; }
        public System.IAsyncResult BeginInvoke(System.Delegate method, object?[]? args) { }
        public object EndInvoke(System.IAsyncResult result) { }
        public object Invoke(System.Delegate method, object?[]? args) { }
    }
    public class XamlPleaseWaitInterruptService : Orc.NuGetExplorer.IPleaseWaitInterruptService
    {
        public XamlPleaseWaitInterruptService(Catel.Services.IBusyIndicatorService busyIndicatorService) { }
        public System.IDisposable InterruptTemporarily() { }
    }
}
namespace Orc.NuGetExplorer.Logging
{
    public class NuGetLogListener : Orc.NuGetExplorer.PackageManagerLogListenerBase, Catel.Logging.ILogListener
    {
        public NuGetLogListener(Orc.NuGetExplorer.INuGetLogListeningSevice nuGetLogListeningSevice) { }
        public bool IgnoreCatelLogging { get; set; }
        public bool IsDebugEnabled { get; set; }
        public bool IsErrorEnabled { get; set; }
        public bool IsInfoEnabled { get; set; }
        public bool IsStatusEnabled { get; set; }
        public bool IsWarningEnabled { get; set; }
        public Catel.Logging.TimeDisplay TimeDisplay { get; set; }
        public event System.EventHandler<Catel.Logging.LogMessageEventArgs>? LogMessage;
        public void Debug(Catel.Logging.ILog log, string message, Catel.Logging.LogData logData, System.DateTime time) { }
        public void Error(Catel.Logging.ILog log, string message, Catel.Logging.LogData logData, System.DateTime time) { }
        public void Info(Catel.Logging.ILog log, string message, Catel.Logging.LogData logData, System.DateTime time) { }
        protected override void OnDebug(object? sender, Orc.NuGetExplorer.NuGetLogRecordEventArgs e) { }
        protected override void OnError(object? sender, Orc.NuGetExplorer.NuGetLogRecordEventArgs e) { }
        protected override void OnInfo(object? sender, Orc.NuGetExplorer.NuGetLogRecordEventArgs e) { }
        protected override void OnWarning(object? sender, Orc.NuGetExplorer.NuGetLogRecordEventArgs e) { }
        public void Status(Catel.Logging.ILog log, string message, Catel.Logging.LogData logData, System.DateTime time) { }
        public void Warning(Catel.Logging.ILog log, string message, Catel.Logging.LogData logData, System.DateTime time) { }
        public void Write(Catel.Logging.ILog log, string message, Catel.Logging.LogEvent logEvent, object? extraData, Catel.Logging.LogData? logData, System.DateTime time) { }
    }
}
namespace Orc.NuGetExplorer.MVVM
{
    public class BindingProxy : System.Windows.Freezable
    {
        public static readonly System.Windows.DependencyProperty DataProperty;
        public BindingProxy() { }
        public object? Data { get; set; }
        protected override System.Windows.Freezable CreateInstanceCore() { }
    }
}
namespace Orc.NuGetExplorer.Messaging
{
    public class ActivatedExplorerTabMessage : Catel.Messaging.MessageBase<Orc.NuGetExplorer.Messaging.ActivatedExplorerTabMessage, Orc.NuGetExplorer.ExplorerTab>
    {
        public ActivatedExplorerTabMessage() { }
        public ActivatedExplorerTabMessage(Orc.NuGetExplorer.ExplorerTab data) { }
    }
}
namespace Orc.NuGetExplorer.Providers
{
    public class ExplorerSettingsContainerModelProvider : Orc.NuGetExplorer.Providers.ModelProvider<Orc.NuGetExplorer.ExplorerSettingsContainer>
    {
        public ExplorerSettingsContainerModelProvider(Catel.IoC.ITypeFactory typeFactory, Orc.NuGetExplorer.INuGetConfigurationService nugetConfigurationService, Catel.Configuration.IConfigurationService configurationService) { }
        public bool IsInitialized { get; set; }
        public override Orc.NuGetExplorer.ExplorerSettingsContainer? Model { get; set; }
        public override Orc.NuGetExplorer.ExplorerSettingsContainer Create() { }
    }
    public class NuGetProjectContextProvider : Orc.NuGetExplorer.INuGetProjectContextProvider
    {
        public NuGetProjectContextProvider(Catel.IoC.ITypeFactory typeFactory) { }
        public NuGet.ProjectManagement.INuGetProjectContext GetProjectContext(NuGet.ProjectManagement.FileConflictAction fileConflictAction) { }
    }
}
namespace Orc.NuGetExplorer.Services
{
    public class NuGetExplorerInitializationService : Orc.NuGetExplorer.Services.INuGetExplorerInitializationService
    {
        public NuGetExplorerInitializationService(Catel.Services.ILanguageService languageService, Orc.NuGetExplorer.ICredentialProviderLoaderService credentialProviderLoaderService, Orc.NuGetExplorer.Services.INuGetProjectUpgradeService nuGetProjectUpgradeService, Orc.NuGetExplorer.INuGetConfigurationService nuGetConfigurationService, Catel.MVVM.IViewModelLocator vmLocator, Catel.IoC.ITypeFactory typeFactory) { }
        public string DefaultSourceKey { get; }
        public int PackageQuerySize { get; set; }
        public virtual System.Threading.Tasks.Task<bool> UpgradeNuGetPackagesIfNeededAsync() { }
    }
}
namespace Orc.NuGetExplorer.ViewModels
{
    public class FeedDetailViewModel : Catel.MVVM.ViewModelBase
    {
        public static readonly Catel.Data.IPropertyData FeedProperty;
        public static readonly Catel.Data.IPropertyData NameProperty;
        public static readonly Catel.Data.IPropertyData SourceProperty;
        public FeedDetailViewModel(Orc.NuGetExplorer.NuGetFeed feed) { }
        [Catel.MVVM.Model]
        public Orc.NuGetExplorer.NuGetFeed Feed { get; set; }
        [Catel.MVVM.ViewModelToModel("", "")]
        public string? Name { get; set; }
        public Catel.MVVM.Command OpenChooseLocalPathToSourceDialog { get; set; }
        [Catel.MVVM.ViewModelToModel("", "")]
        public string? Source { get; set; }
    }
}
namespace Orc.NuGetExplorer.Views
{
    public sealed class PackageSourceSettingControl : Catel.Windows.Controls.UserControl, System.Windows.Markup.IComponentConnector
    {
        public static readonly System.Windows.DependencyProperty CanResetProperty;
        public static readonly System.Windows.DependencyProperty DefaultFeedProperty;
        public static readonly System.Windows.DependencyProperty DefaultSourceNameProperty;
        public static readonly System.Windows.DependencyProperty PackageSourcesProperty;
        public PackageSourceSettingControl() { }
        [Catel.MVVM.Views.ViewToViewModel("", MappingType=Catel.MVVM.Views.ViewToViewModelMappingType.ViewToViewModel)]
        public bool CanReset { get; set; }
        [Catel.MVVM.Views.ViewToViewModel("", MappingType=Catel.MVVM.Views.ViewToViewModelMappingType.ViewToViewModel)]
        public string DefaultFeed { get; set; }
        [Catel.MVVM.Views.ViewToViewModel("", MappingType=Catel.MVVM.Views.ViewToViewModelMappingType.ViewToViewModel)]
        public string DefaultSourceName { get; set; }
        [Catel.MVVM.Views.ViewToViewModel("", MappingType=Catel.MVVM.Views.ViewToViewModelMappingType.TwoWayViewWins)]
        public System.Collections.Generic.IEnumerable<Orc.NuGetExplorer.IPackageSource> PackageSources { get; set; }
        public void InitializeComponent() { }
    }
}
namespace Orc.NuGetExplorer.Web
{
    public class IconDownloader
    {
        public IconDownloader() { }
        public static byte[] GetByUrl(System.Uri uri, System.Net.WebClient client) { }
        public static System.Threading.Tasks.Task<byte[]> GetByUrlAsync(System.Uri uri, System.Net.WebClient client) { }
    }
}
namespace Orc.NuGetExplorer.Windows
{
    public interface IProgressManager
    {
        void HideBar(Catel.MVVM.IViewModel vm);
        void ShowBar(Catel.MVVM.IViewModel vm);
    }
}
namespace Themes
{
    public class Animations : System.Windows.ResourceDictionary, System.Windows.Markup.IComponentConnector
    {
        public Animations() { }
        public void InitializeComponent() { }
    }
    public class Brushes : System.Windows.ResourceDictionary, System.Windows.Markup.IComponentConnector
    {
        public Brushes() { }
        public void InitializeComponent() { }
    }
    public class Compiled : System.Windows.ResourceDictionary, System.Windows.Markup.IComponentConnector
    {
        public Compiled() { }
        public void InitializeComponent() { }
    }
}